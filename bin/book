#!/usr/bin/env python
import sys, os
sys.path.append(os.getcwd() + "/..")

import readline
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode emacs')

from lib.vivid import vivid
from lib import __version__, __github__


def book():
    tocs = ["toys", "cons_the_magnificent"]
    banner()
    while True:
        print '''Usage: [toc]   [help]   [quit]'''
        line = raw_input('book>')
        arr = line.split()
        if len(arr) > 1:
            cmd, argv = arr[0], arr[1:]
        else:
            cmd, argv = line, []
        if cmd == 'toc':
            toc(tocs)
        elif cmd == 'quit':
            sys.exit(0)
        elif cmd == 'help':
            usage()
        else:
            pass


def toc(tocs):
    while True:
        for i, ch in enumerate(tocs):
            caps = [str(x).capitalize() for x in ch.split('_')]
            print str(i+1) + ': ' + ' '.join(caps)
        print 'b: back'
        try:
            no = int(raw_input('chapter>'))
            if 0 < no < len(tocs) + 1:
                chapter(tocs[no-1])
        except ValueError:
            return


def chapter(name):
    sections = {}
    chapter_path = os.path.join("the_little_schemer", name)
    for dirpath, dnames, fnames in os.walk(chapter_path):
        for f in fnames:
            if f.endswith(".scm"):
                name = f.split('.')[0]
                sections[name] = os.path.join(dirpath, f)
    while True:
        print '\t'.join(sections)
        sec = raw_input('section>')
        if sec in sections:
            path = sections[sec]
            fd = open(path)
            s = ''.join(fd.readlines())
            parts = s.split(';---')
            parts = [str(p).strip() for p in parts]
            if len(parts) == 1:
                vivid(parts[0])
            else:
                part(parts)
        else:
            print 'no such section'
            return


def part(parts):
    while True:
        for i, p in enumerate(parts):
            print str(i+1) + ": " + p
        print 'b: back'
        try:
            lineno = int(raw_input('statement>'))
            if 0 < lineno < len(parts) + 1:
                vivid(parts[lineno-1])
                print '*' * 100
        except ValueError:
            return


def usage():
    print '''toc\ttable of contents
help\tprint this message
quit\tgoodbye
'''


def banner():
    print '''The Little Schemer (Revised) - Powered by vivid %s
%s
    __
    '. \\
     '- \\
      / /_         .---.
     / | \\\\,.\/--.//    )
     |  \//        )/  /
      \  ' ^ ^    /    )____.----..  6
       '.____.    .___/            \._)
          .\/.                      )
           '\                       /
           _/ \/    ).        )    (
          /#  .!    |        /\    /
          \  C// #  /'-----''/ #  /
       .   'C/ |    |    |   |    |mrf  ,
       \), .. .'OOO-'. ..'OOO'OOO-'. ..\(,

Pic. from http://www.retrojunkie.com/asciiart/animals/elephant.htm
''' % (__version__, __github__)


if __name__ == "__main__":
    book()
